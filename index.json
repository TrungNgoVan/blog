[{"content":"Hế lô, 🐳 Mình là Trung, hiện tại mình đang theo học cử nhân ngành Toán - Tin học, tại HCMUS.\nMình lập ra blog này để chia sẻ về những kiến thức, hiểu biết cũng như trải nghiệm của mình trong công việc và trong cuộc sống. Thú thật mình không giỏi viết, nhưng mong là nó ổn 🐧\nCảm ơn các bạn đã ghé thăm thế giới của mình 🌊\n","permalink":"https://TrungNgoVan.github.io/blog/docs/first-post/","summary":"Hế lô, 🐳 Mình là Trung, hiện tại mình đang theo học cử nhân ngành Toán - Tin học, tại HCMUS.\nMình lập ra blog này để chia sẻ về những kiến thức, hiểu biết cũng như trải nghiệm của mình trong công việc và trong cuộc sống. Thú thật mình không giỏi viết, nhưng mong là nó ổn 🐧\nCảm ơn các bạn đã ghé thăm thế giới của mình 🌊","title":"Bài viết đầu tiên"},{"content":"Install zsh in ubuntu Update the system repository 1 sudo apt update Install Zsh 1 sudo apt install zsh -y Check installation 1 zsh --version Install plugins Ohmyzsh \u0026amp; powerlever10k 1 2 3 4 5 sh-c \u0026#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; git clone --depth=1 https://github.com/romkatv/powerlevell0k.git ~/powerlevel10k echo \u0026#39;source ~/powerlevel10k/powerlevel10k.zsh-theme\u0026#39; \u0026gt;\u0026gt;~/zshrc fzf (fuzzy finder) https://github.com/junegunn/fzf\nzsh-autosuggestions https://github.com/zsh-users/zsh-autosuggestions\n","permalink":"https://TrungNgoVan.github.io/blog/docs/zsh/","summary":"Install zsh in ubuntu Update the system repository 1 sudo apt update Install Zsh 1 sudo apt install zsh -y Check installation 1 zsh --version Install plugins Ohmyzsh \u0026amp; powerlever10k 1 2 3 4 5 sh-c \u0026#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; git clone --depth=1 https://github.com/romkatv/powerlevell0k.git ~/powerlevel10k echo \u0026#39;source ~/powerlevel10k/powerlevel10k.zsh-theme\u0026#39; \u0026gt;\u0026gt;~/zshrc fzf (fuzzy finder) https://github.com/junegunn/fzf\nzsh-autosuggestions https://github.com/zsh-users/zsh-autosuggestions","title":"Install zsh \u0026 plugins"},{"content":"Hế lô mọi người Long time no see 🐳 Lâu lắm rồi mình mới quay lại viết blog 🐳 Dạo gần đây mình bận ôn thi trên trường và làm 1 vài dự án freelancer bên ngoài. Mọi thứ có vẻ ổn, ít nhất là đến hiện tại 😀\nThời tới 😈 Mới đây mình sau khi chạy deadline xong, khá rảnh nên lọ mọ đi kiếm chỗ apply intern. Lần này mình lên Vietnamework để tìm việc. Đây cũng là lần đầu mình dùng nền tảng này, lên cũng làm hồ sơ qua qua rồi đọc xem có uy tín không. Xem xét 1 lúc thì mình search ra 3 offer cho vị trí Backend Intern mà mình đang tìm kiếm.\nVì tay nhanh hơn não 😀 Nên mình làm hồ sơ, sửa CV và apply luôn không nghĩ nhiều. Một phần vì hiện tại và tương lai gần mình khá là rảnh nên muốn tìm việc làm. Bất ngờ là ngay ngày mình biết đến Vietnamework, cũng là ngày mà công ty mình apply đăng bài tuyển. Người ta nói mà, \u0026ldquo;hay không bằng hên\u0026rdquo;.\nCuộc gọi bất ngờ 📱 Sau khi apply vài ngày thì mình được chị HR gọi xác nhận và mời qua công ty phỏng vấn 🐳 Lần đầu mình được HR gọi, xong cảm giác cũng lạ lắm. Kiểu vui vì được gọi đi phỏng vấn nhưng cũng lo lắng vì lịch phỏng vấn hơi sát, nhưng vẫn vui hơn lo nha.\nTất cả mọi thứ xảy đến đúng bất ngờ á, tự dưng rảnh ngồi tìm việc, thấy job xong apply. Chuẩn bị đi chạy bộ thì có người gọi, bắt máy xong thì biết mình được gọi phỏng vấn. Ão thật đấy 😀\nHành trình đi phỏng vấn của tui 🐳 Lần đầu mình đi phỏng vấn ở 1 công ty 😟 Cảm giác lo lắng là rõ. Lịch phỏng vấn được hẹn là 16h nhưng mình đã bắt đầu đi từ 14h30\u0026rsquo; rồi. Chỗ mình ở qua công ty cũng xa, tầm 20km á. Đợt đấy đi tầm 50\u0026rsquo; là tới nơi rồi. 😀 Không phải chậm đâu, vừa đi vừa nghe chị Google đọc map mà, chứ có biết đường đâu. Sợ GPS load không kịp xong nó chỉ đi lạc xong trễ giờ cái thì mất hết.\nSau bao gian nan thì cũng tới được công ty, kết quả là tới sớm tận 40\u0026rsquo; 😀 Mình đi mượt quá nên đúng số phút trên map báo luôn. Lên tới công ty thì mình có gọi cho chị HR ra đón, chị thấy mình tới sớm quá nên dẫn mình xuống dưới lại và mua nước cho uống 🥰 Lần nữa cảm ơn chị vì ly nước.\nTrao đổi với chị được 1 lúc thì tới giờ nên mình lên và vào phỏng vấn luôn. Ban đầu là ra ban công nói chuyện với anh CTO của công ty (vì phòng họp lúc đó bận không dùng được). Run run và run. Cái gì quan trọn nhắc 3 lần 😀. Mình rất run khi gặp anh CTO, mặc dù ở ban công thoáng mát nhưng vẫn run. Anh CTO rất vui tính, giới thiệu 1 lúc thì cũng bắt đầu buổi phỏng vấn.\nAnh CTO vừa đọc CV của mình, vừa hỏi các mục trong đó. Đầu tiên là về các kiến thức mình list ra trong CV, leval sử dúng các kiến thức đó ở mức nào. Rồi đến các projects mình làm, cái này anh hỏi khá kỹ và khai thác vào CV của mình rất nhiều. Nên là nếu các bạn đang chuẩn bị xin intern thì nên đầu tư vào mục này trong CV nha.\nSau khi trao đổi được 1 lúc thì mình di chuyển vào phòng họp để thuận tiện hơn. Ở đây mình được anh CTO đưa ra 1 vài đoạn code \u0026ldquo;magic\u0026rdquo; trong Javascript. Tất nhiên là mình đã trả lời sai khi anh hỏi về các đoạn code \u0026ldquo;magic\u0026rdquo; đó 😀 Mình gà. Cuối cùng anh CTO cho mình 1 câu giải thuật để kiểm tra mindset cũng như kiến thức về DSA của mình như nào. Đề bài khá đơn giản, và mình đã làm được 🐳. Tuyệt vời luôn. Sau khi hoàn thành bài đó thì mình cũng kết thúc phỏng vấn với anh CTO và gặp chị HR để thảo luận 1 vài cái liên quan. Cuối cùng sau 1 giờ phỏng vấn thì mình ra về với tâm trạng nhẹ nhõm, thoải mái vì mình không mắc sai lầm nào trong lúc phỏng vấn cả 🐧 Mong là thế.\nChút chia sẻ ⭐️ Trong lúc phỏng vấn mình để ý anh CTO khai thác nhiều vào phần projects và không đặt nặng ngôn ngữ lập trình, như mình hiện tại là chuyện Nodejs còn công ty lại đang dùng Python. Mình nghĩ các bạn nên đầu tư vào các dự án các bạn làm, và hiểu về nó sâu nhất có thể. Các anh phỏng vấn có thể rất giỏi và đã làm qua các dự án đó nên khi họ nhìn vào sẽ biết hỏi gì để kiểm tra bạn có thật sự hiểu những gì bạn làm hay không đó 🐳\nKết 🎬 Sau ngày phỏng vấn 1 hôm thì mình đã nhận được kết quả từ chị HR,\u0026hellip; Mình đã pass và được chọn vào vị trí Backend Intern tại công ty với mức lương dưới 1 tỷ.\nĐây là lần đầu mình đi phỏng vấn và cũng là lần đầu mình đi làm công ty. Mình đang tò mò thời gian tới sẽ như thế nào. Nếu ổn mình sẽ quay lại đây và kể với mọi người.\nCảm ơn và hẹn gặp lại 🐳\n","permalink":"https://TrungNgoVan.github.io/blog/docs/first-interview-backend-intern/","summary":"Hế lô mọi người Long time no see 🐳 Lâu lắm rồi mình mới quay lại viết blog 🐳 Dạo gần đây mình bận ôn thi trên trường và làm 1 vài dự án freelancer bên ngoài. Mọi thứ có vẻ ổn, ít nhất là đến hiện tại 😀\nThời tới 😈 Mới đây mình sau khi chạy deadline xong, khá rảnh nên lọ mọ đi kiếm chỗ apply intern. Lần này mình lên Vietnamework để tìm việc.","title":"Lần đầu phỏng vấn vị trí Backend Intern"},{"content":"Mình mới gặp và tìm hiểu thuật toán này 🐳, khi đang làm 1 bài trên leetcode 😃\nThế nào là 1 Palindrome ? Mình hiểu palindrome là 1 chuỗi ký tự đối xứng. Ví dụ:\nChuỗi \u0026ldquo;cabadabac\u0026rdquo; là 1 palindrome. Vì chuỗi này đối xứng qua ký tự \u0026rsquo;d\u0026rsquo; ở vị trí 4 (tính từ 0, theo cách index trong javascript). Hay chuỗi \u0026ldquo;acbaabca\u0026rdquo; cũng là 1 palindrome, chuỗi này đối xứng qua vị trí giữa 2 ký tự \u0026lsquo;a\u0026rsquo;.\nĐể dễ hình dung hơn, các bạn có thể tưởng tưởng 1 palindrome được tạo ra bằng cách phản chiếu 1 chuỗi ký tự qua \u0026ldquo;gương\u0026rdquo;.\nVậy sub-palindromes (còn gọi là palindrome substrings) là các chuỗi con của một chuỗi ban đầu và là palindrome.\nTheo mình tìm hiểu thì sub-palindromes là một khái niệm quan trọng trong xử lý chuỗi và có ứng dụng trong nhiều bài toán, bao gồm tìm kiếm từ, mã hóa, nén dữ liệu và xử lý ngôn ngữ tự nhiên. Trong bài viết này mình sẽ nói đến 1 bài toán khá hay. Go go 🐳\nBài toán: Tìm tất cả các sub-palindromes trong thời gian $O(n)$ Bài toán Cho chuỗi $s$ với độ dài $n$ . Tìm tất cả các cặp $(i, j)$ sao cho chuỗi con $s[i\\dots j]$ là một chuỗi đối xứng. Chuỗi $t$ là một chuỗi đối xứng khi $t = t_{rev}$ ( $t_{rev}$ là một chuỗi đảo ngược của $t$ ).\nPhân tích Chuỗi đối xứng ở đây chính là palindrome mình đã đề cập ở trên.\nTrong trường hợp xấu nhất, chuỗi ban đầu có thể có tới $O(n^2)$ chuỗi con đối xứng. Lúc đầu mình nhìn qua thì nghĩ là không có thuật toán tuyến tính nào cho bài toán này. Tức là sẽ không có bài viết này 👀\nPhân tích kỹ hơn 🔎: Các palindrome sẽ có độ dài lẻ và chẵn khác nhau, và được tính riêng là $d_{odd}[i]$ và $d_{even}[i]$ . Đối với các palindrome có độ dài chẵn, chúng ta giả định rằng chúng có tâm ở vị trí $i$ nếu hai ký tự trung tâm của chúng là $s[i]$ và $s[i-1]$ .\nVí dụ, chuỗi $s = abababc$ có 3 palindromes có độ dài lẻ với tâm ở vị trí $s[3] = b$ , tức là $d_{odd}[3] = 3$ :\na \u0026#xA0; b \u0026#xA0; a \u0026#xA0; b \u0026#x23DF; s 3 \u0026#xA0; a \u0026#xA0; b \u0026#x23DE; d o d d [ 3 ] = 3 c Và chuỗi $s = cbaabd$ có 2 palindromes có độ dài bằng nhau với tâm ở vị trí $s[3] = a$ , tức là $d_{even}[3] = 2$ :\nc \u0026#xA0; b \u0026#xA0; a \u0026#xA0; a \u0026#x23DF; s 3 \u0026#xA0; b \u0026#x23DE; d e v e n [ 3 ] = 2 d Thực tế, vấn đề này đã có nhiều giải pháp: với String Hashing, nó có thể được giải quyết trong $O(n\\cdot \\log n)$ , và với Suffix Trees và Fast LCA , vấn đề này có thể được giải quyết trong $O(n)$ . Các bạn có thể tự tìm hiểu.\nNhưng thuật toán mình nói trong đến trong bài này đơn giản hơn và có ít hằng số ẩn hơn về độ phức tạp của bộ nhớ và thời gian. Thuật toán này được phát hiện bởi Glenn K. Manacher vào năm 1975.\nVề ý tưởng cốt lõi là tính toán số lượng palindrome hiện tại dựa trên thông tin palindrome được tính toán trước đó. Nghe giống DP nhỉ 👀\nCode thôi 💻 Động não 🤔 Để xử lý vấn đề palindrome có độ dài lẻ và chẵn khác nhau, thay vì tính toán cho cả 2 trường hợp. Chúng ta sẽ biến đổi chuỗi ban đầu 1 chút. Cụ thể, mình sẽ thêm ký tự # vào đầu, cuối và giữa các ký tự của chuỗi ban đầu. Trông nó sẽ như vậy:\nSau khi modify chuỗi, chúng ta sẽ luôn thu được 1 chuỗi mới có độ dài lẻ. Và sẽ không có trường hợp palindrome có độ dài chẵn tạo bởi các ký tự trong chuỗi ban đầu.\nBởi vì giữa chúng luôn có ký tự \u0026rsquo;#\u0026rsquo;. Do đó chúng ta đã bỏ qua được vấn đề phải tính toán số lượng các palindromes có độ dài chẵn.\nVậy giờ mình chỉ cần tìm số lượng các palindrome lẻ và lưu lại. 👀 Nghe dễ nhỉ\nThuật toán \u0026ldquo;ngây thơ\u0026rdquo; Khởi tạo một biến đếm tên res để theo dõi số lượng xâu đối xứng. Tạo một chuỗi bắt đầu bằng \u0026lsquo;^\u0026rsquo; và kết thúc bằng \u0026lsquo;$\u0026rsquo; là newS được tạo bằng cách chèn ký tự # giữa mỗi ký tự của chuỗi đầu vào s. Tạo mảng p[] đại diện cho $d_{odd}[]$ Lặp lại từng chỉ số $i$ của chuỗi được sửa đổi newS. Đối với mỗi chỉ số $i$, khởi tạo các biến l và r bằng 1, và p[i] bằng 0. Thực hiện vòng lặp while khi các ký tự tại các chỉ số $i - l$ và $i + r$ hợp lệ và bằng nhau. Vòng lặp này mở rộng xâu đối xứng được tập trung tại chỉ số i và đếm số lượng xâu đối xứng. Bên trong vòng lặp, tăng p[i] lên 1 và cập nhật l và r bằng cách tăng chúng lên 1. Sau khi vòng lặp while kết thúc, thêm Math.ceil(p[i] / 2) vào res. Điều này là vì mỗi chuỗi đối xứng hợp lệ được tính hai lần (một lần cho độ dài lẻ và một lần cho độ dài chẵn), vì vậy chúng ta chia p[i] cho 2 và lấy giá trị làm tròn của nó. Lặp lại các bước 4-7 cho tất cả các chỉ số $i$ của chuỗi được sửa đổi newS. Cuối cùng, trả về giá trị của res, đại diện cho tổng số lượng xâu đối xứng trong chuỗi ban đầu s. Mình dùng Javascript để code bài này:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 var SubPalindromes = function (s) { let res = 0; let newS = \u0026#34;^#\u0026#34;; for (let i = 0; i \u0026lt; s.length; i++) { newS += s[i] + \u0026#34;#\u0026#34;; } newS += \u0026#34;$\u0026#34;; let n = newS.length, l, r, count; let p = new Array(n).fill(0); for (let i = 1; i \u0026lt; n - 1; i++) { p[i] = 0; l = 1; r = 1; while (i - l \u0026gt;= 0 \u0026amp;\u0026amp; i + r \u0026lt; n \u0026amp;\u0026amp; newS[i - l] == newS[i + r]) { p[i]++; l++; r++; } res += Math.ceil(p[i] / 2); } return res; }; Độ phức tạp Thời gian: $O(n^2)$, trong đó n là độ dài của chuỗi đầu vào s. Thuật toán lặp qua từng ký tự của chuỗi đã sửa đổi được xử lý và đối với mỗi ký tự, nó mở rộng bảng màu ở cả hai bên. Trong trường hợp xấu nhất, mỗi ký tự của newS có thể là trung tâm của một palindrome, dẫn đến các lần lặp O(n^2). Không gian: $O(n)$, trong đó n là độ dài của chuỗi đầu vào s. Chuỗi đã sửa đổi processS yêu cầu thêm dung lượng O(n) để lưu trữ phiên bản đã sửa đổi. Thuật toán Manacher\u0026rsquo;s 🐳 Với thuật tóa này, mình sẽ duy trì cặp biên $(l, r)$ của palindrome dài nhất hiện tại (tức sub-palindromes của s dài nhất bắt đầu từ $s[l+1]$ và kết thúc tại $s[r-1]$). Ban đầu, ta thiết lập $l = 0, r = 1$ , tương ứng với chuỗi rỗng. (Để gọn thì mình sẽ gọi \u0026ldquo;palindrome dài nhất hiện tại\u0026rdquo; là maxPalindrome)\nBây giờ, chúng ta cần tính toán $d_{odd}[i]$, trong đó tất cả các giá trị trước đó trong $d_{odd}[]$ đã được tính toán. Thuật toán trông như sau:\nNếu $i$ không thuộc maxPalindrome, tức là $i \\geq r$, chúng ta sẽ thực hiện tương tự thuật toán \u0026ldquo;Ngây thơ\u0026rdquo; ở trên.\nCụ thể, chúng ta sẽ tăng lần lượt $d_{odd}[i]$ và mỗi lần sẽ kiểm tra xem chuỗi con $[i - d_{odd}[i]\\dots i + d_{odd}[i]]$ có phải là một palindrome hay không. Nếu không hoặc vượt quá chuỗi $s$, chúng ta sẽ dừng lại. Sau khi kết thúc, mình tính đươc $d_{odd}[i]$ và lưu lại. Cuối cùng, mình sẽ cập nhật maxPalindrome $(l, r)$. Bước này khá đơn giản, nên tự làm nhé 👀\nBây giờ, xét trường hợp khi $i \\lt r$. Mình sẽ tìm vị trí \u0026ldquo;đối xứng\u0026rdquo; của $i$ trong maxPalindrome $(l, r)$, tức là sẽ lấy vị trí $j = l + (r - i)$ và lấy giá trị của $d_{odd}[j]$. Vì $j$ là vị trí đối xứng với $i$ qua tâm $(l+r)/2$, mình có thể gán $d_{odd}[i] = d_{odd}[j]$. Giải thích cho điều này (palindrome tâm $j$ thực sự được \u0026ldquo;sao chép\u0026rdquo; vào palindrome tâm $i$):\n\u0026#x2026; \u0026#xA0; s l + 1 \u0026#xA0; \u0026#x2026; \u0026#xA0; s j \u0026#x2212; d o d d [ j ] + 1 \u0026#xA0; \u0026#x2026; \u0026#xA0; s j \u0026#xA0; \u0026#x2026; \u0026#xA0; s j + d o d d [ j ] \u0026#x2212; 1 \u0026#xA0; \u0026#x23DF; palindrome tâm j \u0026#xA0; \u0026#x2026; \u0026#xA0; s i \u0026#x2212; d o d d [ j ] + 1 \u0026#xA0; \u0026#x2026; \u0026#xA0; s i \u0026#xA0; \u0026#x2026; \u0026#xA0; s i + d o d d [ j ] \u0026#x2212; 1 \u0026#xA0; \u0026#x23DF; palindrome tâm i \u0026#xA0; \u0026#x2026; \u0026#xA0; s r \u0026#x2212; 1 \u0026#xA0; \u0026#x23DE; maxPalindrome \u0026#xA0; \u0026#x2026; Cách này đã giảm đi khá nhiều độ phức tạp, thay vì mình phải tính $d_{odd}[i]$, mình sẽ dùng lại $d_{odd}[j]$ đã tính trước đó thông qua tính chất đối xứng, đơn giản ha 🐧\nNhưng có một trường hợp đặc biệt: khi palindrome đang xét thuộc maxPalindrome nhưng vượt quá biên của nó, tức là $j - d_{odd}[j] \\le l$ (hoặc $i + d_{odd}[j] \\ge r$ ). Mình sẽ không chắc chắn được lúc này $d_{odd}[i]$ có bằng $d_{odd}[j]$ hay không ? Vì đã vượt ra ngoài maxPalindrome, mà chúng ta chỉ kiếm soát được sự đối xứng bên trong maxPalindrome thôi 🐧.\nĐể xử lý thì lúc đó mình sẽ đặt $d_{odd}[i] = r - i$. Sau đó, sẽ chạy thuật toán \u0026ldquo;Ngây thơ\u0026rdquo; để cố gắng tăng $d_{odd}[i]$. Cách này vẫn sẽ giúp chúng ta giảm bớt được 1 khoảng nào đó khi tính toán $d_{odd}[i]$ so với việc \u0026ldquo;Ngây thơ\u0026rdquo; từ đầu. 👀\nCuối cùng vẫn không quên cập nhật maxPalindrome $(l, r)$\nSau khi kết thúc quá trình tính toán, việc còn lại đơn giản là trả về tổng của $d_{odd}[]$ để có được tổng sub-palindromes.\nMình code bằng Javascript, vì trong bài này, vai trò của $l$ và $r$ giống nhau (vì tính đối xứng) và mình không dùng tới $l$ nên không đưa vào cho đơn giản 🐳\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 let SubPalindromes = function (s) { let n = s.length; let newS = \u0026#34;^#\u0026#34;; for (let i = 0; i \u0026lt; n; i++) { newS += s[i] + \u0026#34;#\u0026#34;; } newS += \u0026#34;$\u0026#34;; let p = new Array(newS.length).fill(0); let center = 0, r = 0; for (let i = 1; i \u0026lt; newS.length - 1; i++) { let mirror = 2 * center - i; if (i \u0026lt; r) { p[i] = Math.min(r - i, p[mirror]); } while (newS[i + p[i] + 1] == newS[i - p[i] - 1]) { p[i]++; } if (i + p[i] \u0026gt; r) { center = i; r = i + p[i]; } } let result = p.reduce((a, b) =\u0026gt; a + Math.floor((b + 1) / 2)); return result; }; Độ phức tạp Thoạt nhìn, không rõ ràng là thuật toán này có độ phức tạp thời gian tuyến tính, bởi vì mình đã chạy thuật toán \u0026ldquo;Ngây thơ\u0026rdquo; trong khi chạy thuật toán Manacher\u0026rsquo;.\nTuy nhiên, các bạn có thể thấy rằng mỗi lần lặp lại thuật toán \u0026ldquo;Ngây thơ\u0026rdquo; đều tăng $r$ ít nhất là 1 đơn vị. Và $r$ không thể giảm trong thuật toán. Vì vậy, thuật toán \u0026ldquo;Ngây thơ\u0026rdquo; sẽ tăng $r$ n lần hay tổng số lần lặp là $O(n)$ .\nCác phần khác của thuật toán Manacher\u0026rsquo;s hoạt động rõ ràng trong thời gian tuyến tính. Như vậy, mình nhận được độ phức tạp về thời gian là $O(n)$.\n","permalink":"https://TrungNgoVan.github.io/blog/docs/manacher-algorithm/","summary":"Mình mới gặp và tìm hiểu thuật toán này 🐳, khi đang làm 1 bài trên leetcode 😃\nThế nào là 1 Palindrome ? Mình hiểu palindrome là 1 chuỗi ký tự đối xứng. Ví dụ:\nChuỗi \u0026ldquo;cabadabac\u0026rdquo; là 1 palindrome. Vì chuỗi này đối xứng qua ký tự \u0026rsquo;d\u0026rsquo; ở vị trí 4 (tính từ 0, theo cách index trong javascript). Hay chuỗi \u0026ldquo;acbaabca\u0026rdquo; cũng là 1 palindrome, chuỗi này đối xứng qua vị trí giữa 2 ký tự \u0026lsquo;a\u0026rsquo;.","title":"Manacher's Algorithm"},{"content":" Chào bạn! Mình là Trung 🐳 bạn có thể gọi mình là Henry, một sinh viên Đại học Khoa học Tự nhiên - Đại học Quốc gia TPHCM.\nMình tạo ra blog này để chia sẻ những kinh nghiệm, kiến thức về nhiều chủ đề khác nhau trong công việc và cuộc sống. Mình không giỏi viết nhưng mong là sẽ ổn 👀\nMình có niềm đam mê với toán học và máy tính 💻. Chính đam mê này mình đã quyết định theo học chuyên ngành Toán - Tin học tại trường đại học hiện tại. Điều này cho phép mình khám phá sâu hơn về cả hai lĩnh vực này. Hiện tại, mình đang học năm thứ hai và rất thích thú với những gì mình đã và đang tìm hiểu.\nNgoài việc học tập và công việc, mình cũng thích đọc sách 📖 về công nghệ và lập trình. Mình thấy nó thú vị khi tìm hiểu về các xu hướng và tiến bộ mới nhất trong lĩnh vực này. Và khi có thời gian rảnh rỗi, mình cũng thích chơi game 🎮 và xem phim.\nĐó là một chút về mình! Nếu bạn có bất kỳ câu hỏi hoặc chỉ muốn nói chuyện, hãy liên hệ với mình qua email.\nCảm ơn bạn đã ghé qua 🐳\n","permalink":"https://TrungNgoVan.github.io/blog/about/","summary":"Chào bạn! Mình là Trung 🐳 bạn có thể gọi mình là Henry, một sinh viên Đại học Khoa học Tự nhiên - Đại học Quốc gia TPHCM.\nMình tạo ra blog này để chia sẻ những kinh nghiệm, kiến thức về nhiều chủ đề khác nhau trong công việc và cuộc sống. Mình không giỏi viết nhưng mong là sẽ ổn 👀\nMình có niềm đam mê với toán học và máy tính 💻.","title":"Một chút về mình 🐳"}]