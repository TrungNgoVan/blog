[{"content":"Hế lô, 🐳 Mình là Trung, hiện tại mình đang theo học cử nhân ngành Toán - Tin học, tại HCMUS.\nMình lập ra blog này để chia sẻ về những kiến thức, hiểu biết cũng như trải nghiệm của mình trong công việc và trong cuộc sống. Thú thật mình không giỏi viết, nhưng mong là nó ổn 🐧\nCảm ơn các bạn đã ghé thăm thế giới của mình 🌊\n","permalink":"https://TrungNgoVan.github.io/blog/docs/first-post/","summary":"Hế lô, 🐳 Mình là Trung, hiện tại mình đang theo học cử nhân ngành Toán - Tin học, tại HCMUS.\nMình lập ra blog này để chia sẻ về những kiến thức, hiểu biết cũng như trải nghiệm của mình trong công việc và trong cuộc sống. Thú thật mình không giỏi viết, nhưng mong là nó ổn 🐧\nCảm ơn các bạn đã ghé thăm thế giới của mình 🌊","title":"Bài viết đầu tiên"},{"content":"Mình mới gặp và tìm hiểu thuật toán này mới đây thôi 🐳, khi đang làm 1 bài trên leetcode 😃\nThế nào là 1 Palindrome ? Mình hiểu palindrome là 1 chuỗi ký tự đối xứng. Ví dụ:\nChuỗi \u0026ldquo;cabadabac\u0026rdquo; là 1 palindrome. Vì chuỗi này đối xứng qua ký tự \u0026rsquo;d\u0026rsquo; ở vị trí 4 (tính từ 0, theo cách index trong javascript). Hay chuỗi \u0026ldquo;acbaabca\u0026rdquo; cũng là 1 palindrome, chuỗi này đối xứng qua vị trí giữa 2 ký tự \u0026lsquo;a\u0026rsquo;.\nĐể dễ hình dung hơn, các bạn có thể tưởng tưởng 1 palindrome được tạo ra bằng cách phản chiếu 1 chuỗi ký tự qua \u0026ldquo;gương\u0026rdquo;.\nVậy sub-palindromes (còn gọi là palindrome substrings) là các chuỗi con của một chuỗi ban đầu và là palindrome.\nTheo mình tìm hiểu thì sub-palindromes là một khái niệm quan trọng trong xử lý chuỗi và có ứng dụng trong nhiều bài toán, bao gồm tìm kiếm từ, mã hóa, nén dữ liệu và xử lý ngôn ngữ tự nhiên. Trong bài viết này mình sẽ nói đến 1 bài toán khá hay. Go go 🐳\nBài toán: Tìm tất cả các sub-palindromes trong thời gian $O(n)$ Bài toán: Cho chuỗi $s$ với độ dài $n$ . Tìm tất cả các cặp $(i, j)$ sao cho chuỗi con $s[i\\dots j]$ là một chuỗi đối xứng. Chuỗi $t$ là một chuỗi đối xứng khi $t = t_{rev}$ ( $t_{rev}$ là một chuỗi đảo ngược của $t$ ).\nPhân tích: Chuỗi đối xứng ở đây chính là palindrome mình đã đề cập ở trên.\nTrong trường hợp xấu nhất, chuỗi ban đầu có thể có tới $O(n^2)$ chuỗi con đối xứng. Lúc đầu mình nhìn qua thì nghĩ là không có thuật toán tuyến tính nào cho bài toán này. Tức là sẽ không có bài viết này 👀\nPhân tích kỹ hơn 🔎: Các palindrome sẽ có độ dài lẻ và chẵn khác nhau, và được tính riêng là $d_{odd}[i]$ và $d_{even}[i]$ . Đối với các palindrome có độ dài chẵn, chúng ta giả định rằng chúng có tâm ở vị trí $i$ nếu hai ký tự trung tâm của chúng là $s[i]$ và $s[i-1]$ .\nVí dụ, chuỗi $s = abababc$ có 3 palindromes có độ dài lẻ với tâm ở vị trí $s[3] = b$ , tức là $d_{odd}[3] = 3$ :\nVà chuỗi $s = cbaabd$ có 2 palindromes có độ dài bằng nhau với tâm ở vị trí $s[3] = a$ , tức là $d_{even}[3] = 2$ :\nThực tế, vấn đề này đã có nhiều giải pháp: với String Hashing, nó có thể được giải quyết trong $O(n\\cdot \\log n)$ , và với Suffix Trees và Fast LCA , vấn đề này có thể được giải quyết trong $O(n)$ . Các bạn có thể tự tìm hiểu.\nNhưng thuật toán mình nói trong đến trong bài này đơn giản hơn và có ít hằng số ẩn hơn về độ phức tạp của bộ nhớ và thời gian. Thuật toán này được phát hiện bởi Glenn K. Manacher vào năm 1975.\nVề ý tưởng cốt lõi là tính toán số lượng palindrome hiện tại dựa trên thông tin palindrome được tính toán trước đó. Nghe giống DP nhỉ 👀\nCode thôi 💻 Suy nghĩ chút 🤔 Để xử lý vấn đề palindrome có độ dài lẻ và chẵn khác nhau, thay vì tính toán cho cả 2 trường hợp. Chúng ta sẽ biến đổi chuỗi ban đầu 1 chút. Cụ thể, mình sẽ thêm ký tự # vào đầu, cuối và giữa các ký tự của chuỗi ban đầu. Trông nó sẽ như vậy:\nSau khi modify chuỗi, chúng ta sẽ luôn thu được 1 chuỗi mới có độ dài lẻ. Và sẽ không có trường hợp palindrome có độ dài chẵn tạo bởi các ký tự trong chuỗi ban đầu.\nBởi vì giữa chúng luôn có ký tự \u0026rsquo;#\u0026rsquo;. Do đó chúng ta đã bỏ qua được vấn đề phải tính toán số lượng các palindromes có độ dài chẵn.\nVậy giờ mình chỉ cần tìm số lượng các palindrome lẻ và lưu lại. 👀 Nghe dễ nhỉ\nThuật toán 📝 Khởi tạo một biến đếm tên res để theo dõi số lượng xâu đối xứng. Tạo một chuỗi được sửa đổi newS bằng cách chèn ký tự # giữa mỗi ký tự của chuỗi đầu vào s. Lặp lại từng chỉ số $i$ của chuỗi được sửa đổi newS. Đối với mỗi chỉ số $i$, khởi tạo các biến l và r bằng 1, và count bằng 0. Thực hiện vòng lặp while khi các ký tự tại các chỉ số $i - l$ và $i + r$ hợp lệ và bằng nhau. Vòng lặp này mở rộng xâu đối xứng được tập trung tại chỉ số i và đếm số lượng xâu đối xứng. Bên trong vòng lặp, tăng count lên 1 và cập nhật l và r bằng cách tăng chúng lên 1. Sau khi vòng lặp while kết thúc, thêm Math.ceil(count / 2) vào res. Điều này là vì mỗi chuỗi đối xứng hợp lệ được tính hai lần (một lần cho độ dài lẻ và một lần cho độ dài chẵn), vì vậy chúng ta chia count cho 2 và lấy giá trị làm tròn của nó. Lặp lại các bước 4-7 cho tất cả các chỉ số $i$ của chuỗi được sửa đổi newS. Cuối cùng, trả về giá trị của res, đại diện cho tổng số lượng xâu đối xứng trong chuỗi ban đầu s. Code ⌨️ Mình dùng Javascript để code bài này:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 var SubPalindromes = function (s) { let res = 0; // Tạo chuỗi newS được sửa đổi từ chuỗi s let newS = \u0026#34;#\u0026#34;; for (let i = 0; i \u0026lt; s.length; i++) { newS += s[i] + \u0026#34;#\u0026#34;; } // Lặp qua các vị trí trong chuỗi newS let n = newS.length, l, r, count; for (let i = 0; i \u0026lt; n; i++) { count = 0; l = 1; r = 1; // Kiểm tra hợp lệ và kiểm tra tính đối xứng của chuỗi con while (i - l \u0026gt;= 0 \u0026amp;\u0026amp; i + r \u0026lt; n \u0026amp;\u0026amp; newS[i - l] == newS[i + r]) { count++; l++; r++; } res += Math.ceil(count / 2); } return res; }; $$ \\overbrace{ s_{l+1}\\ \\ldots\n\\underbrace{ s_{j-d_{\\mathrm{odd}}[j]+1}\\ \\ldots\\ s_j\\ \\ldots\\ s_{j+d_{\\mathrm{odd}}[j]-1}\n}\\text{palindrome}\n\\ldots\n\\underbrace{ s{i-d_{\\mathrm{odd}}[j]+1}\\ \\ldots\\ s_i\\ \\ldots\\ s_{i+d_{\\mathrm{odd}}[j]-1}\n}\\text{palindrome}\n\\ldots\\ s{r-1}\n}^\\text{palindrome}\n\\ldots $$\n","permalink":"https://TrungNgoVan.github.io/blog/docs/manacher-algorithm/","summary":"Mình mới gặp và tìm hiểu thuật toán này mới đây thôi 🐳, khi đang làm 1 bài trên leetcode 😃\nThế nào là 1 Palindrome ? Mình hiểu palindrome là 1 chuỗi ký tự đối xứng. Ví dụ:\nChuỗi \u0026ldquo;cabadabac\u0026rdquo; là 1 palindrome. Vì chuỗi này đối xứng qua ký tự \u0026rsquo;d\u0026rsquo; ở vị trí 4 (tính từ 0, theo cách index trong javascript). Hay chuỗi \u0026ldquo;acbaabca\u0026rdquo; cũng là 1 palindrome, chuỗi này đối xứng qua vị trí giữa 2 ký tự \u0026lsquo;a\u0026rsquo;.","title":"Manacher's Algorithm"},{"content":" Chào bạn! Mình là Trung 🐳 bạn có thể gọi mình là Henry, một sinh viên Đại học Khoa học Tự nhiên - Đại học Quốc gia TPHCM.\nMình tạo ra blog này để chia sẻ những kinh nghiệm, kiến thức về nhiều chủ đề khác nhau trong công việc và cuộc sống. Mình không giỏi viết nhưng mong là sẽ ổn 👀\nMình có niềm đam mê với toán học và máy tính 💻. Chính đam mê này mình đã quyết định theo học chuyên ngành Toán - Tin học tại trường đại học hiện tại. Điều này cho phép mình khám phá sâu hơn về cả hai lĩnh vực này. Hiện tại, mình đang học năm thứ hai và rất thích thú với những gì mình đã và đang tìm hiểu.\nNgoài việc học tập và công việc, mình cũng thích đọc sách 📖 về công nghệ và lập trình. Mình thấy nó thú vị khi tìm hiểu về các xu hướng và tiến bộ mới nhất trong lĩnh vực này. Và khi có thời gian rảnh rỗi, mình cũng thích chơi game 🎮 và xem phim.\nĐó là một chút về mình! Nếu bạn có bất kỳ câu hỏi hoặc chỉ muốn nói chuyện, hãy liên hệ với mình qua email.\nCảm ơn bạn đã ghé qua 🐳\n","permalink":"https://TrungNgoVan.github.io/blog/about/","summary":"Chào bạn! Mình là Trung 🐳 bạn có thể gọi mình là Henry, một sinh viên Đại học Khoa học Tự nhiên - Đại học Quốc gia TPHCM.\nMình tạo ra blog này để chia sẻ những kinh nghiệm, kiến thức về nhiều chủ đề khác nhau trong công việc và cuộc sống. Mình không giỏi viết nhưng mong là sẽ ổn 👀\nMình có niềm đam mê với toán học và máy tính 💻.","title":"Một chút về mình 🐳"}]